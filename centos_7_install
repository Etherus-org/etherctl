#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey install
}

_cmd_install() {
    obey version && \
    obey synctime || {
        local EXIT=$?
        echo "Failed to synchronise time. Please do it manually then try again."
        return $EXIT
    } && \
    obey init && \
    obey rollout "$@" && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install_service || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.7"
}

_cmd_synctime() {
    _synctime_check_ntpenabled || {
        echo "Precise time is required by Etherus" >&2
        echo "Please check the time synchronization consistency" >&2
        _synctime_check_ntpsynced
    }
}

_synctime_check_ntpenabled() {
    local NTPENABLED;
    NTPENABLED="$( (timedatectl | grep 'NTP enabled:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPENABLED" in
            [Yy]* ) echo "Time synchronization enabled"
            ;;
            [Nn]* ) echo "Time synchronization disabled" >&2
            return 1
            ;;
            * ) echo "Time synchronization is: $NTPENABLED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization: $NTPENABLED" >&2
        return 3
    }
}

_synctime_check_ntpsynced() {
    local NTPSYNCED;
    NTPSYNCED="$( (timedatectl | grep 'NTP synchronized:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPSYNCED" in
            [Yy]* ) echo "Time synchronized"
            ;;
            [Nn]* ) echo "Time not synchronized" >&2
            return 1
            ;;
            * ) echo "Time synchronization state is: $NTPSYNCED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization state: $NTPSYNCED" >&2
        return 3
    }
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] && [ "$(cat "$SERVICECTLS" | md5sum)" = "$(getFile 'etherctl' | md5sum)" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_args_rollout() {
    local ARGNAME
    while [ $# -gt 0 ]
    do
        case "$1" in
        -vpk|--validator-private-key)
            ARGNAME="ROLLOUT_VALIDATOR_PRIVATE_KEY"
            ;;
        -vcn|--validator-create-number)
            ARGNAME="ROLLOUT_VALIDATOR_CREATE_NUMBER"
            ;;
        *)
            [ "$ARGNAME" = "" ] && {
                echo "Invalid parameter: $1" >&2
                return 1
            }
            case "$ARGNAME" in
            ROLLOUT_VALIDATOR_PRIVATE_KEY)
                ROLLOUT_VALIDATOR_PRIVATE_KEY+=("$1")
                ;;
            ROLLOUT_VALIDATOR_CREATE_NUMBER)
                ROLLOUT_VALIDATOR_CREATE_NUMBER=$(($1))
                ;;
            *)
                return 2
            esac
        esac
        shift # next parameter
    done
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$(command -v sh || command -v bash)" -c "$0 rollout $(echo "$@")" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    _args_rollout "$@" || {
        local EXITCODE=$?
        echo "Failed to parse arguments for rollout: $@" >&2
        return $EXITCODE
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        local NODEPATH="$("$SERVICECTLS" "path_$1")"
        [ -d "$NODEPATH/data/tenderus/config" ] && {
            echo "Validator Node $1 already exists" >&2
            return 20
        }
        mkdir -p "$NODEPATH/data/tenderus/config" || {
            echo "Validator Node $1 preparation failed" >&2
            return 21
        }
        getFile "$(pwd)/config" "genesis.json" > "$NODEPATH/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 22
        }
        [ $(($1)) -gt 0 ] && [ "${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}" != "" ] && {
            local PRIVATE_KEY="${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}"
            PRIVATE_KEY="$(
                case "$PRIVATE_KEY" in
                H4sI*)
                    DECODE() { 
                        base64 -d | gunzip
                    }
                    ;;
                \{*)
                    DECODE() { 
                        cat
                    }
                    ;;
                *)
                    DECODE() { 
                        base64 -d
                    }
                esac
                ( echo "$PRIVATE_KEY" | DECODE ) 2>/dev/null
            )" && [ ! -z "$PRIVATE_KEY" ] && { #"
                echo "Using specified private key $(echo "$PRIVATE_KEY" | md5sum | sed 's/\([0-9a-fA-F]\+\).*/\1/g')"
                echo "$PRIVATE_KEY" > "$NODEPATH/data/tenderus/config/priv_validator.json"
            } || {
                echo "Failed to set private key for Validator Node $1. Using autogenerated..." >&2
            }
        }
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node $1 creation failed" >&2
            return 23
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node $1 ID" >&2
            return 24
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node $1 ID: $VNID" >&2
            return 25
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator Node $1 as peer to Sentry Node" >&2
            return 26
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Node $1 Public Key" >&2
            return 27
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Node $1 Public Key: $VALPUB" >&2
            return 28
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="${ROLLOUT_VALIDATOR_CREATE_NUMBER:-1}"
    sequence createValidator $(seq $COUNT)
    [ ${#VALPUBS} -gt 0 ] || {
        echo "Invalid Validator Public Key: $VALPUB" >&2
        return 26
    }
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install_service() {
    command -v systemctl &>/dev/null && {
        obey install_service_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_service_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_service_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_service_systemd "$@" || {
            echo "Failed to run install_service_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    local WARNINGS=()
    local INSTALLS=0
    addDependency() {
        local OUT;
        OUT+="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" && {
            ((INSTALLS+=1))
        } || {
            OUT+="; $(echo "Requires=etherus@$1.service" >> '/etc/systemd/system/etherus.target')" && {
                ((INSTALLS+=1))
            } || {
                WARNINGS+=("Failed to add etherus $1 service to target: $OUT")
            }
        }
    }
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are not added to etherus:" >&2
        (IFS=$'\n'; echo "${WARNINGS[*]}") >&2
        return 15
    }
    [ ${INSTALLS:-0} -gt 0 ] || {
        echo "No dependencies were added to etherus target" >&2
        return 16
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
        "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
  },
  "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
  },
  "block_gossip_params": {
      "block_part_size_bytes": "65536"
  },
  "evidence_params": {
      "max_age": "100000"
  }
},
"validators": [
{
  "pub_key": {
    "type": "tendermint/PubKeyEd25519",
    "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
},
"power": "2500",
"name": ""
}
],
"app_hash": ""
}
#EOF#
;;
"etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< 'H4sIAPgxv1wCA+08+VPbSNa/+6/oKN5gQ+QLwmRInIQJMHEtV3HMTAoTl7DaRh+2pJFkDAv+37/3+pC6JfmAQDa1u04Vsbtfv3797j5fFl6Sz55/Gzj9y4iUPpdJo1b/lWy6keeSHWdgRd41eX9rmdT1ok9DyxlUgtGHwktodnLphMQPvH5gDQl87QWUktDrRWMroBvk1huRruWSgNpOGAXOxSiixImI5dpVLyBDz3Z6t4AGikauTQMSXVIS0WAYEq/Hfvy+f0p+py4NrAE5HF0MnC7ZdbrUDSmxoGcsCS+pTS4QDTbYQQqOBQVkxwO8VuR47mtCHagPyDUNQvhNVmUXAt9r4gWAo2RFSHZAPB+blYHWWwIsSFpWckeeDNAmjssQX3o+jOYSEML4xs5gQC4oGYW0Nxq8BgwAS/5snXw5OD0hm/tfyZ+bR0eb+ydf3wFsdOlBLb2mHJMz9AcOIIYxBZYb3QLpgGBv++jzF2ix+Vtrt3XyFegnO62T/e3jY7JzcEQ2yeHm0Unr8+nu5hE5PD06PDjerhByTJEoCu1n8LbHpAMMtGkE8g75mL+COEOgbGCTS+uagli71LkGuizSBf2ZLzPAYQ08t89GCLAJC4GwVo+Afr0mIRD4/jKK/HCjWh2Px5W+O6p4Qb864EjC6gckp3B0un+4efKlaRTvtk++AC9OdkXRhlks+WO7PDEKRwcHJxkoUYZgXZsYxZLtBK41pPD17rfN4y+d44PTo8/bZ7XziVE2yIeqTa+r7ggE2Pjwqk5evSICu8AsEVYvHHejiN+Mwued32W/4it0FwN2Pbfn9AHDnwdH/5RYOPFV17NpCDWbrZPD1tZxs1QuFM7IC2IiqRKDQc6RjuEVkK4WZyGRqCnQrKpQGPlgInQbrWMUlsrkrkDg07VCZEhpxDhjesAIx2U1+FneC2/D5XL8exNUsWmMHdf2xkC8LH73Lmmx67ijm0yTAZbmN0hAaffSI8ZnpnmgI6iVtCvsFOiI6JD4YKOgtaBIhwOKpAMh7sCzwDU4rhXckp4zoCEZWu7IGgxuSeQRjQ9gwKDOkQeQoPtdb+gDPBFMAb/mDcGvjYIu4ACDlurZBz0eXVQAvCpATdRUyr+D6rxqxIMIaDQKXFJnBTS0unlsHqbYfPN2vbO+luFaEf8zraG9vpbLO+fj2/UpjVbfrj8Bu62ge+lg6SigPz3LGzrL+fC2BLEOuCNGrwP9oN9jbKpUKpxL3VEwIKbZAy9IzHCXGAkdYVRRiBHxsVp7s0Z/salt1S/g2+ra6trF2pp18WaVNuzam1/XqoE1ltR27NEVdUxwL3Tg+WavXnlbWdcLO5ycyAoq/X8Z5J60GVml0dAKr0it0UDDhlpi+tc3/wJKXc8MQZVMH8KoE2LACon5OW31ZXJ/Lww9YckODBK8OcipT6M8pvzsgl5lBZPCBD2meYN2Bc2BLpuY10S0BAszvWxtRDEDYdXnyBzNK2pOshsNYi858LoQ5U72Dndau9tgYqXhFZiHD0hALG1Fg0B1lnJGJrWGCsRMO0C0kG/EZUvkA9Aq+lARA7OUcgSqKdVcpsejLvA1hJwDBMMHYROEu7/X4BLZcyCEYdXBUO2kkQRDzuXiS2LSv0mNRxgk6f17Yrx8+XL7YAf+MnroDSRANYbtNLT6kBgWa8QQvDfImfwKXqVfJ1a/QcD88MdfSmVnH35A+fn5eSx2+LwX1R86790PhJiEhD7tQlrJUhGMpUx/ZQ8wPnpDu5CmqUiyH9Bj2QaUMsC8DR0Fw1eDbBN8Ys8aDaJ8LAOvz0iB5DTCrAh/cxtBWliAz2sYgh1HfAzsmxxBbidh5PkCFr7MAAVcEZgZA730xvK3SNam4ie+YyeNIE1DNSKtLbUhcXqcVGoXdOZ1YrkwHMHITSTFmIAMnsoIQlw6Zg27AUVlxJ9TKfUtSCYRGL3W2AuuUFKKy8kbqGXbhxRy+veuZQchEvkCy4iPOT5YnwuofAQAhUm1DujQu6aZ1rw4i4C5NxUFdh041zAsgcOxVQJ4VbZz0W1+S9m52jjTsdb3PoqPm4zeMZMrdCxbaf1qrVKdclvDTjOSAsH8YQ0c8CsgeSmppERMEv5Jb2dpJbTB7lt2jIFR09rKUQqbDiBnYYDiK2J88eIF2bIiC+wRVBkmUy5oChTmIBBOEBGIrxi2PJe6WWA5o0RgYIYbxSWO2/MKsS8sFLpD27eCkEL4KDE8Z+Bb6wZpEkOk6DyQKaHl895Ws1QskRJp7Rw3OwAAYdcMLKx4x303zDD2ts4+nU9IGZzve46yzNO58NLpcSe1vf8HIBKgG/UJr7dpd4DuzdwhRgfI63AInPmQV8rEJydbOHWvXMgDpJvcIHHTYonRKsgzePkydgrTqVTMFhEb/+r9k+KnQpmxbOB5fhxw0XcABM6xjeInjs32YqSSw6SIQEC1yAyKHwWkSzFuARg4oBgpiuEOGMTHnUiD07/vxeGDxxaYirP0IxEYMesxdftIW7HUg7kQoJUTvCpkHUPrxqY+OKs6MaNbH/IoYvJ5J2pnx1hmiQkvEfFFi7iQ/YUQo5fC6rf2fbFqVPtLUHQDgTIspxnBtWf/YItlJUIQ+4aCorLcaZcqy+1ysX1fWS5W23XAp8gnZmXCG5AOYtwwa4mMIQW4e4n1qIBmP4LBKbzr8LZS+CBUXZWYZv7VOmkKAeWSzztdYUwq4veJoQHzro6YJDC7QYQ8axXkCmYqzSaaOogZb5IM3tzYmvrjlB8t+5LexErDQg8W9shS7WYJYbCZ2SWNN+uQjstcNBmw0gEgskdDf6FOJKxJyZJRuzEQf7VOjH/UGvDDaLsGqkEU4Lx/iSwlOXABsPUh94jdDedqqwmJL8sd62n1GneJOSi/U4B3N49BOFKb66CjeouITYzculAsI6xW2negEfVJe9KutD9Wq0ZS9a22DL/LGfR3+B9qlVKzt/kXVDQ2zHoNPpNUm93WHtSuYm26ijdc4w15ZalkmqJK+EXQ2lJJICqXmd6KAoBZqUPReZJJJzq26/VDlslBajd0omZRoJDLYhdQgWlSdGm5ONehf8OMKIzzP5gi3TjDEUTI0fCCBk29y7RP4S5lfIkNmdvfbe1vp+2cDaSFQxiwIbAh8hnMXY5FtZo1rTTmQ4JBZ0IGT0p2OrqJ9mt4zXUM/lSKJWEroLagHqKTCThSxsOykU+WEA/MMBajbMp4OBom0rvcHBJmOWZvHqExBabAuYL/Izkp8hkr8gl8YGdmTH1eFzN4z5uvrJTLhSwAaIxWI8ID6hco4QcmtcRBQhQGgV+l5ryHrS10zfUNs1gUjpVXiJlwg5fdKZpqFPkk8kUSYdMGVgS0fCrLQOPaKLB8YnDGtXllG3Cgp49hxpYTCQzcB6reFf0hGlE4uggjJfCbkZy7SkmwqTG9hpEYjKa2wd1lHDmNaruNsbcMFCBaNgM6hAmSlk/UcxMJuWMwL5FADI1cDCgK7kym4+ALI4yGYikeNQ8SS+3gY9uFOIF/ZPYgFralFK+g7QuDkcAH6PmLj4/NE3/E+LgGilDW0EKZMJYzqVDpfop13LPBtU2YmeIswNCtVVElPUTHEFe4n2O29k8kWEOP5HE/kiMIxebqPg4IesssvLCJfKqFoSZ0XCxJfO9e0u5VRjCY8vAtghzuysqFBFT/TgHFexEJScokh6zpPD8TTtHI89Oqz8lNXjIBJCN5uUaY75e5PGt50mxngBP5MuAsQDLxaEzx0RMFpp6IlC/OLGhs+5t7299haccnmyfbc4UoNiga2r5ErawZkjAiTMhWSHF1krvBUNfbSFPIA20ooD1mH7lgqwoY7qiNwimAa3rXbF0cbD5/GyQ1vYUmKBSYUTZy15zN1WR3YYKT/Yd/CgXHddjixrZ7Hct9/3RPBNiaYKg0o6YyrYQpzulePDc63Zskng9+MbnXxIo2NkeVaeKsjIOCxqH/PxFr3zk6J1Z3EAVXc1AQboybW1tHTaPe+KVSg391aQbQkVpfY7VyLTkORfoicYGt95jmpTekTcO2Iqsql+MNKAaHeHPbsXy/aURdf6NajTvdgDRpff3N25XS6jKMiGVJphn43crAsu1AwgsiBPQvOrTf8HXo4h2SPhHQ6yp0spYzlUuxhXHMPr1pto0ezAKoSBeQ4enN1qmMMU3khu0EnC1idPwvpzkRAC/1vSBCJ1l6+2btzUqpoYx0HLI/Oe3GodpsPd3MC5y+44ZNY1l0cn3phZH8fU2DCy90otumsSbqu14Q2t7QctykjeU7TYNGl69dGr0e04vV1za9GPWx1rroOh1NBnMkzLVjCAlbZ1arlKQdv2s7oXUxoIogQSK4XJpvA08VS7UoKHb/M3GOxazt7aNjtTe5wvCPcAk3rBJFUSPU+yz22IAqbHS49pKJezpu0TVPEl/zBDE1d+AhyuKr3/kcywwg6ZL5MmYJk2yAZ9tMc8aQP31Lck+59M5X3kM9I5gyH0snYXxRe4PMpUUNBblb/FNiPmMQWpqmdWU5ZdGIzBXQh8cwig/zMMWhDUOfg+kTtnghkKVbC3SJnaR5LiZN99/uWXBYynaotVL0TOMP7j/8BJZ5eNT64xmss4LxY1ET5TQ83EwzLMwd0dOZKx/UPJtVdqye1WAFNd9ltcirjOUiWxe2Xs7tD4/mnTBjlWlPZ8NJp4sYciFP6fhm29HIhYzlGcwV13+CnoYuxqMddOBKYRMFEBd1clVHAYIhYCb+bPSfZafDQBY/lmf6ak2udxp4/elNWG1uM5ZPx8dmUgunopzEiWa6Jc77nIgvEMGMle8opPqV2CsxDVkfwai4orcw7wto1VhWNv5yCZa6KYhIkS1rOXF85jAVhTGH+tgMNPLj1QtxftPIW3MWixYCpNqnLoUIW/m/0JOHLrs+gPhTYaYOW4Yi3bJjtfudYyEXbDmGA48C0Gu2Az+lMx1XbBE6rj47uhupU+nJDGElIVNjTp6GStCMW1PnoGxbd7aLRPCZgUXi4vt/OOedYB+jIWQ+uQ5zARfJO826welL8MpEb/qgpOXMHZPA9ARD0rtcIEPLZGnZsWayjdm1GMFykxZcSn/GmVicfD96HiUX0XEF/bXcLteyg+9LAnPxZxZS0/5NYUee7idrXhVyGtJ4I7ptuHQsVpAIWz1qGxgY+amrVDoaL8HGJXI5Vi5DqwQqPrV7pR77YKuO0OyjctKALzGyGm2ZkS0b3jfKU0ziiC87kpwhZzfL8rfiunY6m7ibejDwbuaRwYXch3p8chYyeXCGKRbIRq4lyelbh2lMkyeVOYOdiguVNMHH80iGrOPYEh/CzMA5iQ8hk2lnGLkyJOo5VS8K0zp4UKROGr7SypRl3dQJd/1sJCc3T4sSrTT03ZgU+vhs+UTulz2jE5PbcVNJnsZs6WDTq49PmeC+mJN8xmhz4tkibqqzsJvinmYhZ5Wkr0/sq3Q/lR2yMW/atqB7WiTQ6+d22oU51hvLbBqfCg+w29z5wfebbA5DH2+xz2cVicHmEzyFv0DXI7eT2ElKcQg1Hg+nW14q2CC1ylpFHPPgVdJbbJBiKZ5fCSzCKORsUZQiiawvfsiM96PsZanHKpUTIsfbR3+0PrOTfVhbl7V3GSvjgBk7U0LLPcglz+YWjRvv3ukKmOj9YpinaraKWFc2xjFmaQvxTPAiZpXKjDQjiJZAJydk0wSlRknUsJDfSuxvSuKVE7lPSHsSNh9Cemy6C1GO3uMBuirz3QeN5FGJ8YL5yMeMZ5vFncdEvcW87HQ6NIb7jv3c3F6AzZgixOe7FmLcfI7NxqkxQT1rzo+ec1WN3Sdk9RymlJyEx0LtHLBM5DW+TZLD/Qa2EC6L94JH9xguyJ8WksLz7azkr+lpCU16eVbc/bFcvEAWRvL+VVGq4YzrtZN4pHwtV9MlthaTkzOmz6FPoWc+DcX4WGLi7/GS0g8WQSpcJeqW3GD64Uox9dwg3liadxRJ+Aico+JbCV/xYoy+i1rOhTvZO8SrL0kB3lUoxxc2sHxre5dd2/iUPl8tz3lxGPQO/YD6xNz+myx9O6uZv1pmb9PcOb9bq00+nX3bOF/ZwNLzleJSdrWYI2u513j1iY0Zci2JujBzT2qSnuDEg9nf/hPfCJDVckRsOHcaE3DYMZztZQ/MyUE2xQ+xqqv1tQKOhleWFVwunUpfhvuAJBFA3JTdI9FFxM99q6WiaXqxOV7WwzspRVw8exe75nTPy+faLaTM0iSJghFNGa+4LfjfYS1Mn2Zby+bW1lxrAZjnshZE/TBr2Tk43d9qss3suYayiJWwwalWkjszV/uOtUr9XEBEuZqyqq7ZVJEhwV5Yk+lGiYT9pIaVsqnMfdafx7rUW7TfbWXsfMC/Ny4tYFzKkP8Xkp7McuSW0BNYD6rRtND0M9rQc9vOj4pSj7Kd/wWoHxqgntjMZgUqtCllhVh//SQTQdgDF3OtKGsGC+px0oSxtxTf2I6fSuhInpfTTE9ud2cCsXQXuNkiPQebNqd00MhxQv+B/NE97MOZoz5+8TMtwmSPgi1yfmDuosuSxL/EXo7pXMfPfMw9paW+TWBAuxE1Ngz+RoExwfcJ8MLihRXS9TUc2H18XX7+Y1bJYyOoNblLq1MfDpuoouR6818oR3bDCMLdfCnOk0Vr67uEwM+YLiQByWmb8mdg2JssIV4UGFounoLH3eWu5eJFUHyb00Xzr6ht8cnLLrva73t48MJhD5wNPHAMqKB4l4Tg+F+ojX6jPf52pujS56+msSVlkjrjya/3Zw+Gpn0Zf/fFJ8YmYMZ3VcNRQD9uEIPcuunE5tbN7FdDUXoT7ezr7fkyKRfSj0rln+BKdlkK2Yd2+CJrYXbmkNraPdt3M93PbQQN5BlozlPLDceQad5CGGEva1WM7KabfOWDaQ9/zSf9ymXy+Iu60SD3So0y0Z9/y7s4GG8glFNPx826ZChGoT5ZJt8ZisjAuaIbAllH0oLDVIvmvzIpRz52fOqNki2FkvoeCX/WEfGnXiRJKtj1ZLkDElkBmnJZYBIHs6s06lZ5C1v8X310i/anSkiDa6dLF2kk/c+MVp4fSdxxncKCnhPQMZi3CcxKc0GrM83EgZgmT59Mdn8OrwtWIzzxmy7+Jbd4vcaKv4+YJyFAVRL0Zz9BgJsS15AYNaYh6IMCWyl7jSB1Sqk8Gy61i1VO7TU9/tyGeOuK7w3+P9O1nwiWWwAA' | gunzip)"
#EOF#
;;
"etherus.target") cat << "#EOF#"
[Install]
WantedBy=multi-user.target

[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
#EOF#
;;
"etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
"tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
*) cat "$FILEPATH/$1"
;;
esac
}

obey "$@"
