#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path_$1")/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $(seq $COUNT)
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    command -v systemctl &>/dev/null && {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload && {
        echo "Etherus Daemon installed successfully"
    } || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    addDependency() {
        local OUT="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" || {
            echo "Failed to add etherus $1 service to target" >&2
            WARNINGS+=("$OUT")
        }
    }
    local WARNINGS=()
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are added to etherus target with warnings:" >&2
        (IFS=$'\n'; echo "${WARNINGS[@]}")
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
