#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp and 6657/tcp manually..."
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 3
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="cbc83b53f922a536993b1b055c5c699b210fb840@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_1_private" || {
        echo "Validator Node creation failed" >&2
        return 14
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_1)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 15
    }
    local VNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path_1)/data/tenderus")" || {
        echo "Failed to get Validator Node ID" >&2
        return 16
    }
    echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Validator Node ID: $VNID" >&2
        return 17
    }
    './etherctl' "addPrivatePeer $VNID" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 18
    }
    local VALID="$('./etherctl' "getValidator_1")" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 19
    }
    echo "$VALID" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
        echo "Invalid Validator ID: $VALID" >&2
        return 20
    }
    echo "$VALID" > 'validator.id' && {
        echo "Your validator ID is saved to file: $(pwd)/validator.id"
    } || {
        echo "Failed to write Validator ID to file" >&2
    }
    echo "Your validator ID: $VALID"
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    echo "Etherus Daemon installed successfully. Use systemctl for administration etherus.target"
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
