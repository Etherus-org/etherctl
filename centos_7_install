#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey install
}

_cmd_install() {
    obey version && \
    obey synctime || {
        local EXIT=$?
        echo "Failed to synchronise time. Please do it manually then try again."
        return $EXIT
    } && \
    obey init && \
    obey rollout "$@" && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install_service || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.7"
}

_cmd_synctime() {
    _synctime_check_ntpenabled || {
        echo "Precise time is required by Etherus" >&2
        echo "Please check the time synchronization consistency" >&2
        _synctime_check_ntpsynced
    }
}

_synctime_check_ntpenabled() {
    local NTPENABLED;
    NTPENABLED="$( (timedatectl | grep 'NTP enabled:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPENABLED" in
            [Yy]* ) echo "Time synchronization enabled"
            ;;
            [Nn]* ) echo "Time synchronization disabled" >&2
            return 1
            ;;
            * ) echo "Time synchronization is: $NTPENABLED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization: $NTPENABLED" >&2
        return 3
    }
}

_synctime_check_ntpsynced() {
    local NTPSYNCED;
    NTPSYNCED="$( (timedatectl | grep 'NTP synchronized:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPSYNCED" in
            [Yy]* ) echo "Time synchronized"
            ;;
            [Nn]* ) echo "Time not synchronized" >&2
            return 1
            ;;
            * ) echo "Time synchronization state is: $NTPSYNCED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization state: $NTPSYNCED" >&2
        return 3
    }
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] && [ "$(cat "$SERVICECTLS" | md5sum)" = "$(getFile 'etherctl' | md5sum)" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_args_rollout() {
    local ARGNAME
    while [ $# -gt 0 ]
    do
        case "$1" in
        -vpk|--validator-private-key)
            ARGNAME="ROLLOUT_VALIDATOR_PRIVATE_KEY"
            ;;
        -vcn|--validator-create-number)
            ARGNAME="ROLLOUT_VALIDATOR_CREATE_NUMBER"
            ;;
        *)
            [ "$ARGNAME" = "" ] && {
                echo "Invalid parameter: $1" >&2
                return 1
            }
            case "$ARGNAME" in
            ROLLOUT_VALIDATOR_PRIVATE_KEY)
                ROLLOUT_VALIDATOR_PRIVATE_KEY+=("$1")
                ;;
            ROLLOUT_VALIDATOR_CREATE_NUMBER)
                ROLLOUT_VALIDATOR_CREATE_NUMBER=$(($1))
                ;;
            *)
                return 2
            esac
        esac
        shift # next parameter
    done
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$(command -v sh || command -v bash)" -c "$0 rollout $(echo "$@")" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    _args_rollout "$@" || {
        local EXITCODE=$?
        echo "Failed to parse arguments for rollout: $@" >&2
        return $EXITCODE
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    ( PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" ) || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        local NODEPATH="$("$SERVICECTLS" "path_$1")"
        [ -d "$NODEPATH/data/tenderus/config" ] && {
            echo "Validator Node $1 already exists" >&2
            return 20
        }
        mkdir -p "$NODEPATH/data/tenderus/config" || {
            echo "Validator Node $1 preparation failed" >&2
            return 21
        }
        getFile "$(pwd)/config" "genesis.json" > "$NODEPATH/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 22
        }
        [ $(($1)) -gt 0 ] && [ "${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}" != "" ] && {
            local PRIVATE_KEY="${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}"
            PRIVATE_KEY="$(
                case "$PRIVATE_KEY" in
                H4sI*)
                    DECODE() { 
                        base64 -d | gunzip
                    }
                    ;;
                \{*)
                    DECODE() { 
                        cat
                    }
                    ;;
                *)
                    DECODE() { 
                        base64 -d
                    }
                esac
                ( echo "$PRIVATE_KEY" | DECODE ) 2>/dev/null
            )" && [ ! -z "$PRIVATE_KEY" ] && { #"
                echo "Using specified private key $(echo "$PRIVATE_KEY" | md5sum | sed 's/\([0-9a-fA-F]\+\).*/\1/g')"
                echo "$PRIVATE_KEY" > "$NODEPATH/data/tenderus/config/priv_validator.json"
            } || {
                echo "Failed to set private key for Validator Node $1. Using autogenerated..." >&2
            }
        }
        ( PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" ) || {
            echo "Validator Node $1 creation failed" >&2
            return 23
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node $1 ID" >&2
            return 24
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node $1 ID: $VNID" >&2
            return 25
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator Node $1 as peer to Sentry Node" >&2
            return 26
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Node $1 Public Key" >&2
            return 27
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Node $1 Public Key: $VALPUB" >&2
            return 28
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="${ROLLOUT_VALIDATOR_CREATE_NUMBER:-1}"
    sequence createValidator $(seq $COUNT)
    [ ${#VALPUBS} -gt 0 ] || {
        echo "Invalid Validator Public Key: $VALPUB" >&2
        return 26
    }
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install_service() {
    command -v systemctl &>/dev/null && {
        obey install_service_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_service_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_service_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_service_systemd "$@" || {
            echo "Failed to run install_service_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    local WARNINGS=()
    local INSTALLS=0
    addDependency() {
        local OUT;
        OUT+="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" && {
            ((INSTALLS+=1))
        } || {
            OUT+="; $(echo "Requires=etherus@$1.service" >> '/etc/systemd/system/etherus.target')" && {
                ((INSTALLS+=1))
            } || {
                WARNINGS+=("Failed to add etherus $1 service to target: $OUT")
            }
        }
    }
    sequence addDependency $( ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall" ) || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are not added to etherus:" >&2
        (IFS=$'\n'; echo "${WARNINGS[*]}") >&2
        return 15
    }
    [ ${INSTALLS:-0} -gt 0 ] || {
        echo "No dependencies were added to etherus target" >&2
        return 16
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
        "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
  },
  "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
  },
  "block_gossip_params": {
      "block_part_size_bytes": "65536"
  },
  "evidence_params": {
      "max_age": "100000"
  }
},
"validators": [
{
  "pub_key": {
    "type": "tendermint/PubKeyEd25519",
    "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
},
"power": "2500",
"name": ""
}
],
"app_hash": ""
}
#EOF#
;;
"etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
;;
"etherus.target") cat << "#EOF#"
[Install]
WantedBy=multi-user.target

[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
#EOF#
;;
"etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
"tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
*) cat "$FILEPATH/$1"
;;
esac
}

obey "$@"
