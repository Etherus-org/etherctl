#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp and 6657/tcp manually..."
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 3
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="cbc83b53f922a536993b1b055c5c699b210fb840@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_$1)/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        local VNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path_$1)/data/tenderus")" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        './etherctl' "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$('./etherctl' "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $COUNT
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    echo "Etherus Daemon installed successfully"
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    echo "To check Etherus Daemon use: systemctl status etherus.target"
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $(seq $@)
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
