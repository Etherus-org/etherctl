#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey install
}

_cmd_install() {
    obey version && \
    obey synctime || {
        local EXIT=$?
        echo "Failed to synchronise time. Please do it manually then try again."
        return $EXIT
    } && \
    obey init && \
    obey rollout "$@" && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install_service || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.7"
}

_cmd_synctime() {
    _synctime_check_ntpenabled || {
        echo "Precise time is required by Etherus" >&2
        echo "Please check the time synchronization consistency" >&2
        _synctime_check_ntpsynced
    }
}

_synctime_check_ntpenabled() {
    local NTPENABLED;
    NTPENABLED="$( (timedatectl | grep 'NTP enabled:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPENABLED" in
            [Yy]* ) echo "Time synchronization enabled"
            ;;
            [Nn]* ) echo "Time synchronization disabled" >&2
            return 1
            ;;
            * ) echo "Time synchronization is: $NTPENABLED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization: $NTPENABLED" >&2
        return 3
    }
}

_synctime_check_ntpsynced() {
    local NTPSYNCED;
    NTPSYNCED="$( (timedatectl | grep 'NTP synchronized:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPSYNCED" in
            [Yy]* ) echo "Time synchronized"
            ;;
            [Nn]* ) echo "Time not synchronized" >&2
            return 1
            ;;
            * ) echo "Time synchronization state is: $NTPSYNCED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization state: $NTPSYNCED" >&2
        return 3
    }
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] && [ "$(cat "$SERVICECTLS" | md5sum)" = "$(getFile 'etherctl' | md5sum)" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_args_rollout() {
    local ARGNAME
    while [ $# -gt 0 ]
    do
        case "$1" in
        -vpk|--validator-private-key)
            ARGNAME="ROLLOUT_VALIDATOR_PRIVATE_KEY"
            ;;
        -vcn|--validator-create-number)
            ARGNAME="ROLLOUT_VALIDATOR_CREATE_NUMBER"
            ;;
        *)
            [ "$ARGNAME" = "" ] && {
                echo "Invalid parameter: $1" >&2
                return 1
            }
            case "$ARGNAME" in
            ROLLOUT_VALIDATOR_PRIVATE_KEY)
                ROLLOUT_VALIDATOR_PRIVATE_KEY+=("$1")
                ;;
            ROLLOUT_VALIDATOR_CREATE_NUMBER)
                ROLLOUT_VALIDATOR_CREATE_NUMBER=$(($1))
                ;;
            *)
                return 2
            esac
        esac
        shift # next parameter
    done
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$(command -v sh || command -v bash)" -c "$0 rollout $(echo "$@")" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    _args_rollout "$@" || {
        local EXITCODE=$?
        echo "Failed to parse arguments for rollout: $@" >&2
        return $EXITCODE
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        local NODEPATH="$("$SERVICECTLS" "path_$1")"
        [ -d "$NODEPATH/data/tenderus/config" ] && {
            echo "Validator Node $1 already exists" >&2
            return 20
        }
        mkdir -p "$NODEPATH/data/tenderus/config" || {
            echo "Validator Node $1 preparation failed" >&2
            return 21
        }
        getFile "$(pwd)/config" "genesis.json" > "$NODEPATH/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 22
        }
        [ $(($1)) -gt 0 ] && [ "${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}" != "" ] && {
            local PRIVATE_KEY="${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}"
            PRIVATE_KEY="$(
                case "$PRIVATE_KEY" in
                H4sI*)
                    DECODE() { 
                        base64 -d | gunzip
                    }
                    ;;
                \{*)
                    DECODE() { 
                        cat
                    }
                    ;;
                *)
                    DECODE() { 
                        base64 -d
                    }
                esac
                ( echo "$PRIVATE_KEY" | DECODE ) 2>/dev/null
            )" && [ ! -z "$PRIVATE_KEY" ] && { #"
                echo "Using specified private key $(echo "$PRIVATE_KEY" | md5sum | sed 's/\([0-9a-fA-F]\+\).*/\1/g')"
                echo "$PRIVATE_KEY" > "$NODEPATH/data/tenderus/config/priv_validator.json"
            } || {
                echo "Failed to set private key for Validator Node $1. Using autogenerated..." >&2
            }
        }
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node $1 creation failed" >&2
            return 23
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node $1 ID" >&2
            return 24
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node $1 ID: $VNID" >&2
            return 25
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator Node $1 as peer to Sentry Node" >&2
            return 26
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Node $1 Public Key" >&2
            return 27
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Node $1 Public Key: $VALPUB" >&2
            return 28
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="${ROLLOUT_VALIDATOR_CREATE_NUMBER:-1}"
    sequence createValidator $(seq $COUNT)
    [ ${#VALPUBS} -gt 0 ] || {
        echo "Invalid Validator Public Key: $VALPUB" >&2
        return 26
    }
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install_service() {
    command -v systemctl &>/dev/null && {
        obey install_service_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_service_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_service_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_service_systemd "$@" || {
            echo "Failed to run install_service_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    local WARNINGS=()
    local INSTALLS=0
    addDependency() {
        local OUT;
        OUT+="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" && {
            ((INSTALLS+=1))
        } || {
            OUT+="; $(echo "Requires=etherus@$1.service" >> '/etc/systemd/system/etherus.target')" && {
                ((INSTALLS+=1))
            } || {
                WARNINGS+=("Failed to add etherus $1 service to target: $OUT")
            }
        }
    }
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are not added to etherus:" >&2
        (IFS=$'\n'; echo "${WARNINGS[*]}") >&2
        return 15
    }
    [ ${INSTALLS:-0} -gt 0 ] || {
        echo "No dependencies were added to etherus target" >&2
        return 16
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
        "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
  },
  "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
  },
  "block_gossip_params": {
      "block_part_size_bytes": "65536"
  },
  "evidence_params": {
      "max_age": "100000"
  }
},
"validators": [
{
  "pub_key": {
    "type": "tendermint/PubKeyEd25519",
    "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
},
"power": "2500",
"name": ""
}
],
"app_hash": ""
}
#EOF#
;;
"etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
;;
"etherus.target") cat << "#EOF#"
[Install]
WantedBy=multi-user.target

[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
#EOF#
;;
"etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
"tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
*) cat "$FILEPATH/$1"
;;
esac
}

obey "$@"
