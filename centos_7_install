#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey synctime || {
        local EXIT=$?
        echo "Failed to synchronise time. Please do it manually then try again."
        return $EXIT
    } && \
    obey init && \
    obey rollout "$@" && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_synctime() {
    local NTPENABLED;
    NTPENABLED="$( (timedatectl | grep 'NTP enabled:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPENABLED" in
            [Yy]* ) echo "Time synchronization enabled"
            ;;
            [Nn]* ) echo "Time synchronization is not enabled" >&2
            return 1
            ;;
            * ) echo "Time synchronization is: $NTPENABLED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization: $NTPENABLED" >&2
        return 3
    }
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] && [ "$(cat "$SERVICECTLS" | md5sum)" = "$(getFile 'etherctl' | md5sum)" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_args_rollout() {
    local ARGNAME
    while [ $# -gt 0 ]
    do
        case "$1" in
        -vpk|--validator-private-key)
            ARGNAME="ROLLOUT_VALIDATOR_PRIVATE_KEY"
            ;;
        *)
            [ "$ARGNAME" = "" ] && {
                echo "Invalid parameter: $1" >&2
                return 1
            }
            case "$ARGNAME" in
            ROLLOUT_VALIDATOR_PRIVATE_KEY)
                ROLLOUT_VALIDATOR_PRIVATE_KEY+=("$1")
                ;;
            *)
                return 2
            esac
        esac
        shift # next parameter
    done
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    _args_rollout "$@" || {
        local EXITCODE=$?
        echo "Failed to parse arguments for rollout: $@" >&2
        return $EXITCODE
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path_$1")/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        [ $(($1)) -gt 0 ] && [ "${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}" != "" ] && {
            local PRIVATE_KEY="${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}"
            PRIVATE_KEY="$(
                case "$PRIVATE_KEY" in
                H4sI*)
                    DECODE() { 
                        base64 -d | gunzip
                    }
                    ;;
                \{*)
                    DECODE() { 
                        cat
                    }
                    ;;
                *)
                    DECODE() { 
                        base64 -d
                    }
                esac
                ( echo "$PRIVATE_KEY" | DECODE ) 2>/dev/null
            )" && { #"
                echo "$PRIVATE_KEY" > "$("$SERVICECTLS" "path_$1")/data/tenderus/config/priv_validator.json"
            } || {
                echo "Failed to set priv_validator for node $1. Using autogenerated..." >&2
            }
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $(seq $COUNT)
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    command -v systemctl &>/dev/null && {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    addDependency() {
        local OUT;
        OUT+="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" && {
            ((INSTALLS+=1))
        } || {
            OUT+="; $(echo "Requires=etherus@$1.service" >> '/etc/systemd/system/etherus.target')" && {
                ((INSTALLS+=1))
            } || {
                WARNINGS+=("Failed to add etherus $1 service to target: $OUT")
            }
        }
    }
    local WARNINGS
    local INSTALLS
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are not added to etherus:" >&2
        (IFS=$'\n'; echo "${WARNINGS[*]}") >&2
        return 15
    }
    [ ${INSTALLS:-0} -gt 0 ] || {
        echo "No dependencies were added to etherus target" >&2
        return 16
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
        "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
  },
  "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
  },
  "block_gossip_params": {
      "block_part_size_bytes": "65536"
  },
  "evidence_params": {
      "max_age": "100000"
  }
},
"validators": [
{
  "pub_key": {
    "type": "tendermint/PubKeyEd25519",
    "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
},
"power": "2500",
"name": ""
}
],
"app_hash": ""
}
#EOF#
;;
"etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
;;
"etherus.target") cat << "#EOF#"
[Install]
WantedBy=multi-user.target

[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
#EOF#
;;
"etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
"tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
*) cat "$FILEPATH/$1"
;;
esac
}

obey "$@"
