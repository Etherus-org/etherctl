#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 3
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="cbc83b53f922a536993b1b055c5c699b210fb840@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_1_private" || {
        echo "Validator Node creation failed" >&2
        return 14
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_1)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 15
    }
    local VNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path_1)/data/tenderus")" || {
        echo "Failed to get Validator Node ID" >&2
        return 16
    }
    echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Validator Node ID: $VNID" >&2
        return 17
    }
    './etherctl' "addPrivatePeer $VNID" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 18
    }
    local VALID="$('./etherctl' "getValidator_1")" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 19
    }
    echo "$VALID" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
        echo "Invalid Validator ID: $VALID" >&2
        return 20
    }
    echo "$VALID" > 'validator.id' && {
        echo "Your validator ID is saved to file: $(pwd)/validator.id"
    } || {
        echo "Failed to write Validator ID to file" >&2
    }
    echo "Your validator ID: $VALID"
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed reload systemd daemon" >&2
        return 13
    }
    echo "Etherus Daemon installed successfully. Use systemctl for administration etherus.target"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
