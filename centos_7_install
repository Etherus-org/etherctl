#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey install
}

_cmd_install() {
    obey version && \
    obey synctime || {
        local EXIT=$?
        echo "Failed to synchronise time. Please do it manually then try again."
        return $EXIT
    } && \
    obey init && \
    obey rollout "$@" && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install_service || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.7"
}

_cmd_synctime() {
    _synctime_check_ntpenabled || {
        echo "Precise time is required by Etherus" >&2
        echo "Please check the time synchronization consistency" >&2
        _synctime_check_ntpsynced
    }
}

_synctime_check_ntpenabled() {
    local NTPENABLED;
    NTPENABLED="$( (timedatectl | grep 'NTP enabled:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPENABLED" in
            [Yy]* ) echo "Time synchronization enabled"
            ;;
            [Nn]* ) echo "Time synchronization disabled" >&2
            return 1
            ;;
            * ) echo "Time synchronization is: $NTPENABLED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization: $NTPENABLED" >&2
        return 3
    }
}

_synctime_check_ntpsynced() {
    local NTPSYNCED;
    NTPSYNCED="$( (timedatectl | grep 'NTP synchronized:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPSYNCED" in
            [Yy]* ) echo "Time synchronized"
            ;;
            [Nn]* ) echo "Time not synchronized" >&2
            return 1
            ;;
            * ) echo "Time synchronization state is: $NTPSYNCED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization state: $NTPSYNCED" >&2
        return 3
    }
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] && [ "$(cat "$SERVICECTLS" | md5sum)" = "$(getFile 'etherctl' | md5sum)" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_args_rollout() {
    local ARGNAME
    while [ $# -gt 0 ]
    do
        case "$1" in
        -vpk|--validator-private-key)
            ARGNAME="ROLLOUT_VALIDATOR_PRIVATE_KEY"
            ;;
        -vcn|--validator-create-number)
            ARGNAME="ROLLOUT_VALIDATOR_CREATE_NUMBER"
            ;;
        *)
            [ "$ARGNAME" = "" ] && {
                echo "Invalid parameter: $1" >&2
                return 1
            }
            case "$ARGNAME" in
            ROLLOUT_VALIDATOR_PRIVATE_KEY)
                ROLLOUT_VALIDATOR_PRIVATE_KEY+=("$1")
                ;;
            ROLLOUT_VALIDATOR_CREATE_NUMBER)
                ROLLOUT_VALIDATOR_CREATE_NUMBER=$(($1))
                ;;
            *)
                return 2
            esac
        esac
        shift # next parameter
    done
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$(command -v sh || command -v bash)" -c "$0 rollout $(echo "$@")" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    _args_rollout "$@" || {
        local EXITCODE=$?
        echo "Failed to parse arguments for rollout: $@" >&2
        return $EXITCODE
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        local NODEPATH="$("$SERVICECTLS" "path_$1")"
        [ -d "$NODEPATH/data/tenderus/config" ] && {
            echo "Validator Node $1 already exists" >&2
            return 20
        }
        mkdir -p "$NODEPATH/data/tenderus/config" || {
            echo "Validator Node $1 preparation failed" >&2
            return 21
        }
        getFile "$(pwd)/config" "genesis.json" > "$NODEPATH/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 22
        }
        [ $(($1)) -gt 0 ] && [ "${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}" != "" ] && {
            local PRIVATE_KEY="${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}"
            PRIVATE_KEY="$(
                case "$PRIVATE_KEY" in
                H4sI*)
                    DECODE() { 
                        base64 -d | gunzip
                    }
                    ;;
                \{*)
                    DECODE() { 
                        cat
                    }
                    ;;
                *)
                    DECODE() { 
                        base64 -d
                    }
                esac
                ( echo "$PRIVATE_KEY" | DECODE ) 2>/dev/null
            )" && [ ! -z "$PRIVATE_KEY" ] && { #"
                echo "Using specified private key $(echo "$PRIVATE_KEY" | md5sum | sed 's/\([0-9a-fA-F]\+\).*/\1/g')"
                echo "$PRIVATE_KEY" > "$NODEPATH/data/tenderus/config/priv_validator.json"
            } || {
                echo "Failed to set private key for Validator Node $1. Using autogenerated..." >&2
            }
        }
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node $1 creation failed" >&2
            return 23
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node $1 ID" >&2
            return 24
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node $1 ID: $VNID" >&2
            return 25
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator Node $1 as peer to Sentry Node" >&2
            return 26
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Node $1 Public Key" >&2
            return 27
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Node $1 Public Key: $VALPUB" >&2
            return 28
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="${ROLLOUT_VALIDATOR_CREATE_NUMBER:-1}"
    sequence createValidator $(seq $COUNT)
    [ ${#VALPUBS} -gt 0 ] || {
        echo "Invalid Validator Public Key: $VALPUB" >&2
        return 26
    }
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install_service() {
    command -v systemctl &>/dev/null && {
        obey install_service_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_service_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_service_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_service_systemd "$@" || {
            echo "Failed to run install_service_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    local WARNINGS=()
    local INSTALLS=0
    addDependency() {
        local OUT;
        OUT+="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" && {
            ((INSTALLS+=1))
        } || {
            OUT+="; $(echo "Requires=etherus@$1.service" >> '/etc/systemd/system/etherus.target')" && {
                ((INSTALLS+=1))
            } || {
                WARNINGS+=("Failed to add etherus $1 service to target: $OUT")
            }
        }
    }
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are not added to etherus:" >&2
        (IFS=$'\n'; echo "${WARNINGS[*]}") >&2
        return 15
    }
    [ ${INSTALLS:-0} -gt 0 ] || {
        echo "No dependencies were added to etherus target" >&2
        return 16
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
        "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
  },
  "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
  },
  "block_gossip_params": {
      "block_part_size_bytes": "65536"
  },
  "evidence_params": {
      "max_age": "100000"
  }
},
"validators": [
{
  "pub_key": {
    "type": "tendermint/PubKeyEd25519",
    "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
},
"power": "2500",
"name": ""
}
],
"app_hash": ""
}
#EOF#
;;
"etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '' | gunzip)"
#EOF#
;;
"etherus.target") cat << "#EOF#"
[Install]
WantedBy=multi-user.target

[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
#EOF#
;;
"etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
"tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
*) cat "$FILEPATH/$1"
;;
esac
}

obey "$@"
