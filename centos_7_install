#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 3
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="cbc83b53f922a536993b1b055c5c699b210fb840@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_1_private" || {
        echo "Validator Node creation failed" >&2
        return 14
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_1)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 15
    }
    local VNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path_1)/data/tenderus")" || {
        echo "Failed to get Validator Node ID" >&2
        return 16
    }
    echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Validator Node ID: $VNID" >&2
        return 17
    }
    './etherctl' "addPrivatePeer $VNID" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 18
    }
    local VALID="$('./etherctl' "getValidator_1")" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 19
    }
    echo "$VALID" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
        echo "Invalid Validator ID: $VALID" >&2
        return 20
    }
    echo "$VALID" > 'validator.id' && {
        echo "Your validator ID is saved to file: $(pwd)/validator.id"
    } || {
        echo "Failed to write Validator ID to file" >&2
    }
    echo "Your validator ID: $VALID"
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed reload systemd daemon" >&2
        return 13
    }
    echo "Etherus Daemon installed successfully. Use systemctl for administration etherus.target"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
