#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp and 6657/tcp manually..."
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 3
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_$1)/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        local VNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path_$1)/data/tenderus")" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        './etherctl' "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$('./etherctl' "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $COUNT
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    echo "Etherus Daemon installed successfully"
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    echo "To check Etherus Daemon use: systemctl status etherus.target"
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $(seq $@)
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
