#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp and 6657/tcp manually..."
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_$1)/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        local VNID="$('./etherctl' getNodeId_$1)" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        './etherctl' "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$('./etherctl' "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $(seq $COUNT)
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload && {
        echo "Etherus Daemon installed successfully"
    } || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    addDependency() {
        systemctl add-requires "etherus.target" "etherus@$1" 2>/dev/null || {
            echo "Failed to add etherus $1 service to target" >&2
        }
    }
    sequence addDependency $(./etherctl listall)
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
