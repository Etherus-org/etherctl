#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp and 6657/tcp manually..."
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path_$1")/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $(seq $COUNT)
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload && {
        echo "Etherus Daemon installed successfully"
    } || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    addDependency() {
        local OUT="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" || {
            echo "Failed to add etherus $1 service to target" >&2
            WARNINGS+=("$OUT")
        }
    }
    local WARNINGS=()
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are added to etherus target with warnings:" >&2
        (IFS=$'\n'; echo "${WARNINGS[@]}")
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
