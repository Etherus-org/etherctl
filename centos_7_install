#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 3
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="cbc83b53f922a536993b1b055c5c699b210fb840@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_1_private" || {
        echo "Validator Node creation failed" >&2
        return 14
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_1)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 15
    }
    local VNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path_1)/data/tenderus")" || {
        echo "Failed to get Validator Node ID" >&2
        return 16
    }
    echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Validator Node ID: $VNID" >&2
        return 17
    }
    './etherctl' "addPrivatePeer $VNID" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 18
    }
    local VALID="$('./etherctl' "getValidator_1")" || {
        echo "Failed to add Validator peer to Sentry Node" >&2
        return 19
    }
    echo "$VALID" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
        echo "Invalid Validator ID: $VALID" >&2
        return 20
    }
    echo "$VALID" > 'validator.id' && {
        echo "Your validator ID is saved to file: $(pwd)/validator.id"
    } || {
        echo "Failed to write Validator ID to file" >&2
    }
    echo "Your validator ID: $VALID"
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed reload systemd daemon" >&2
        return 13
    }
    echo "Etherus Daemon installed successfully. Use systemctl for administration etherus.target"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
