#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey version && \
    obey init && \
    obey rollout && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey install || {
        echo "Etherus daemon was not installed"
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp and 6657/tcp manually..."
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.3"
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" rollout "$@" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" './etherctl' "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path)/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$('./bin/tenderus' show_node_id --home "$('./etherctl' path)/data/tenderus")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        env PEERS="$SNID@127.0.0.1:6656" './etherctl' "new_$1_private" || {
            echo "Validator Node creation failed" >&2
            return 20
        }
        getFile "$(pwd)/config" "genesis.json" > "$('./etherctl' path_$1)/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 21
        }
        local VNID="$('./etherctl' getNodeId_$1)" || {
            echo "Failed to get Validator Node ID" >&2
            return 22
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node ID: $VNID" >&2
            return 23
        }
        './etherctl' "addPrivatePeer $VNID" || {
            echo "Failed to add Validator peer to Sentry Node" >&2
            return 24
        }
        local VALPUB="$('./etherctl' "getValidator_$1")" || {
            echo "Failed to get Validator Public Key" >&2
            return 25
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Public Key: $VALPUB" >&2
            return 26
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="$((${1:-1}))"
    sequence createValidator $COUNT
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install() {
    [ "$(ps -sp 1 | tail -n+2 | sed 's/.* .*\/\([^ ]*\) .*$/\1/')" != "systemd" ] || {
        obey install_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_systemd "$@" || {
            echo "Failed to run install_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    echo "Etherus Daemon installed successfully"
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    echo "To check Etherus Daemon use: systemctl status etherus.target"
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $(seq $@)
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
    "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
    },
    "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
    },
    "block_gossip_params": {
      "block_part_size_bytes": "65536"
    },
    "evidence_params": {
      "max_age": "100000"
    }
  },
  "validators": [
    {
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
      },
      "power": "2500",
      "name": ""
    }
  ],
  "app_hash": ""
}
#EOF#
    ;;
    "etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
    ;;
    "etherus.target") cat << "#EOF#"
[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
Requires=etherus@0.service
Requires=etherus@1.service

[Install]
WantedBy=multi-user.target
#EOF#
    ;;
    "etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
ExecStop=/opt/etherus/etherctl stop_%i_etherus
ExecReload=/opt/etherus/etherctl start_%i_etherus stop_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    "tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
ExecStop=/opt/etherus/etherctl stop_%i_tenderus
ExecReload=/opt/etherus/etherctl start_%i_tenderus stop_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
    ;;
    *) cat "$FILEPATH/$1"
    ;;
    esac
}

obey "$@"
