#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

SERVICENAME='etherus'
SERVICEPATH='/opt/etherus'
SERVICECTLS="$SERVICEPATH/etherctl"

###################################################################################################

_cmd_() {
    obey install
}

_cmd_install() {
    obey version && \
    obey synctime || {
        local EXIT=$?
        echo "Failed to synchronise time. Please do it manually then try again."
        return $EXIT
    } && \
    obey init && \
    obey rollout "$@" && \
    echo "Etherus installed successfully" || {
        local EXIT=$?
        echo "Etherus installation failed"
        return $EXIT
    }
    obey firewall || {
        echo "Firewall was not configured"
        echo "Please open ports 6656/tcp, 6657/tcp and 6660/tcp manually..."
    }
    obey install_service || {
        echo "Etherus daemon was not installed"
    }
}

_cmd_version() {
    echo "Etherus install script v0.1.7"
}

_cmd_synctime() {
    local NTPENABLED;
    NTPENABLED="$( (timedatectl | grep 'NTP enabled:' | sed 's/.*: \(.*\)/\1/') 2>&1 )" && {
        case "$NTPENABLED" in
            [Yy]* ) echo "Time synchronization enabled"
            ;;
            [Nn]* ) echo "Time synchronization is not enabled" >&2
            return 1
            ;;
            * ) echo "Time synchronization is: $NTPENABLED" >&2
            return 2
        esac
    } || {
        echo "Failed to detect time synchronization: $NTPENABLED" >&2
        return 3
    }
}

_cmd_init() {
    id -u "$SERVICENAME" &>/dev/null || {
        useradd -d "$SERVICEPATH" -r -s /bin/false "$SERVICENAME" || {
            echo "Failed to create service user: $SERVICENAME" >&2
            return 1
        }
    }

    [ -d "$SERVICEPATH/" ] || {
        mkdir -m 750 -p "$SERVICEPATH/" || {
            echo "Failed to create service directory: $SERVICEPATH" >&2
            return 2
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/" || {
            echo "Failed to change service directory owner: $SERVICEPATH" >&2
            return 3
        }
    }

    [ -d "$SERVICEPATH/bin" ] || {
        mkdir -m 750 -p "$SERVICEPATH/bin" || {
            echo "Failed to create binaries directory: $SERVICEPATH" >&2
            return 4
        }
        chown -R "$SERVICENAME:$SERVICENAME" "$SERVICEPATH/bin" || {
            echo "Failed to change binaries directory owner: $SERVICEPATH" >&2
            return 5
        }
    }

    [ -x "$SERVICECTLS" ] && [ "$(cat "$SERVICECTLS" | md5sum)" = "$(getFile 'etherctl' | md5sum)" ] || {
        touch "$SERVICECTLS" && \
        chmod 755 "$SERVICECTLS" && \
        getFile 'etherctl' > "$SERVICECTLS" || {
            echo "Failed to download service control script" >&2
            return 6
        }
    }
}

_args_rollout() {
    local ARGNAME
    while [ $# -gt 0 ]
    do
        case "$1" in
        -vpk|--validator-private-key)
            ARGNAME="ROLLOUT_VALIDATOR_PRIVATE_KEY"
            ;;
        -vcn|--validator-create-number)
            ARGNAME="ROLLOUT_VALIDATOR_CREATE_NUMBER"
            ;;
        *)
            [ "$ARGNAME" = "" ] && {
                echo "Invalid parameter: $1" >&2
                return 1
            }
            case "$ARGNAME" in
            ROLLOUT_VALIDATOR_PRIVATE_KEY)
                ROLLOUT_VALIDATOR_PRIVATE_KEY+=("$1")
                ;;
            ROLLOUT_VALIDATOR_CREATE_NUMBER)
                ROLLOUT_VALIDATOR_CREATE_NUMBER=$(($1))
                ;;
            *)
                return 2
            esac
        esac
        shift # next parameter
    done
}

_cmd_rollout() {
    [ "$(id -u)" = "$(id -u "$SERVICENAME")" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run rollout as $SERVICENAME" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$(command -v sh || command -v bash)" -c "$0 rollout $(echo "$@")" || {
            echo "Failed to run rollout" >&2
            return 2
        }
        return 0
    }
    _args_rollout "$@" || {
        local EXITCODE=$?
        echo "Failed to parse arguments for rollout: $@" >&2
        return $EXITCODE
    }
    [ -d "$SERVICEPATH/" ] && cd "$SERVICEPATH/" || {
        echo "Unable to access service directory: $SERVICEPATH" >&2
        return 3
    }
    env PEERS="07e21d35df9ff6ecce28a5f494d95b990da305bc@master.etherus.org:6656" "$SERVICECTLS" "new" || {
        echo "Sentry Node creation failed" >&2
        return 10
    }
    getFile "$(pwd)/config" "genesis.json" > "$("$SERVICECTLS" "path")/data/tenderus/config/genesis.json" || {
        echo "Failed to write Etherus genesis to Sentry Node" >&2
        return 11
    }
    local SNID="$("$SERVICECTLS" "getNodeId")" || {
        echo "Failed to get Sentry Node ID" >&2
        return 12
    }
    echo "$SNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
        echo "Invalid Sentry Node ID: $SNID" >&2
        return 13
    }
    local VALPUBS=()
    createValidator() {
        local NODEPATH="$("$SERVICECTLS" "path_$1")"
        [ -d "$NODEPATH/data/tenderus/config" ] && {
            echo "Validator Node $1 already exists" >&2
            return 20
        }
        mkdir -p "$NODEPATH/data/tenderus/config" || {
            echo "Validator Node $1 preparation failed" >&2
            return 21
        }
        getFile "$(pwd)/config" "genesis.json" > "$NODEPATH/data/tenderus/config/genesis.json" || {
            echo "Failed to write Etherus genesis to Validator Node" >&2
            return 22
        }
        [ $(($1)) -gt 0 ] && [ "${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}" != "" ] && {
            local PRIVATE_KEY="${ROLLOUT_VALIDATOR_PRIVATE_KEY[$(($1-1))]}"
            PRIVATE_KEY="$(
                case "$PRIVATE_KEY" in
                H4sI*)
                    DECODE() { 
                        base64 -d | gunzip
                    }
                    ;;
                \{*)
                    DECODE() { 
                        cat
                    }
                    ;;
                *)
                    DECODE() { 
                        base64 -d
                    }
                esac
                ( echo "$PRIVATE_KEY" | DECODE ) 2>/dev/null
            )" && [ ! -z "$PRIVATE_KEY" ] && { #"
                echo "Using specified private key $(echo "$PRIVATE_KEY" | md5sum | sed 's/\([0-9a-fA-F]\+\).*/\1/g')"
                echo "$PRIVATE_KEY" > "$NODEPATH/data/tenderus/config/priv_validator.json"
            } || {
                echo "Failed to set private key for Validator Node $1. Using autogenerated..." >&2
            }
        }
        env PEERS="$SNID@127.0.0.1:6656" "$SERVICECTLS" "new_$1_private" || {
            echo "Validator Node $1 creation failed" >&2
            return 23
        }
        local VNID="$("$SERVICECTLS" "getNodeId_$1")" || {
            echo "Failed to get Validator Node $1 ID" >&2
            return 24
        }
        echo "$VNID" | grep -Eq '^[0-9a-fA-F]{40}$' || {
            echo "Invalid Validator Node $1 ID: $VNID" >&2
            return 25
        }
        "$SERVICECTLS" "addPrivatePeer $VNID" || {
            echo "Failed to add Validator Node $1 as peer to Sentry Node" >&2
            return 26
        }
        local VALPUB="$("$SERVICECTLS" "getValidator_$1")" || {
            echo "Failed to get Validator Node $1 Public Key" >&2
            return 27
        }
        echo "$VALPUB" | grep -Eq '^0x[0-9a-fA-F]{64}$' || {
            echo "Invalid Validator Node $1 Public Key: $VALPUB" >&2
            return 28
        }
        VALPUBS+=("$VALPUB")
    }
    local COUNT="${ROLLOUT_VALIDATOR_CREATE_NUMBER:-1}"
    sequence createValidator $(seq $COUNT)
    [ ${#VALPUBS} -gt 0 ] || {
        echo "Invalid Validator Public Key: $VALPUB" >&2
        return 26
    }
    local VALPUBS="$(IFS=$'\n'; echo "${VALPUBS[*]}")"
    echo "$VALPUBS" > 'validator.pub' && {
        echo "Your Validator Public Key is saved to file: $(pwd)/validator.pub"
    } || {
        echo "Failed to write Validator Public Key to file" >&2
    }
    echo "Your validator Public Key:"
    echo "$VALPUBS" | sed 's/^/    /'
}

_cmd_install_service() {
    command -v systemctl &>/dev/null && {
        obey install_service_systemd
        return $?
    }
    echo "Failed to detect system service" >&2
    return 1
}

_cmd_install_service_systemd() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run install_service_systemd as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" install_service_systemd "$@" || {
            echo "Failed to run install_service_systemd" >&2
            return 2
        }
        return 0
    }
    [ -f "/etc/systemd/system/etherus.target" ] || getFile "$(pwd)/config/systemd" "etherus.target" > "/etc/systemd/system/etherus.target" || {
        echo "Failed to add etherus target to systemd" >&2
        return 10
    }
    [ -f "/etc/systemd/system/etherus@.service" ] || getFile "$(pwd)/config/systemd" "etherus@.service" > "/etc/systemd/system/etherus@.service" || {
        echo "Failed to add etherus service to systemd" >&2
        return 11
    }
    [ -f "/etc/systemd/system/tenderus@.service" ] || getFile "$(pwd)/config/systemd" "tenderus@.service" > "/etc/systemd/system/tenderus@.service" || {
        echo "Failed to add tenderus service to systemd" >&2
        return 12
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    addDependency() {
        local OUT;
        OUT+="$(systemctl add-requires "etherus.target" "etherus@$1" 2>&1)" && {
            ((INSTALLS+=1))
        } || {
            OUT+="; $(echo "Requires=etherus@$1.service" >> '/etc/systemd/system/etherus.target')" && {
                ((INSTALLS+=1))
            } || {
                WARNINGS+=("Failed to add etherus $1 service to target: $OUT")
            }
        }
    }
    local WARNINGS
    local INSTALLS
    sequence addDependency $(env ETHERCTLRUNPATH="$SERVICEPATH" "$SERVICECTLS" "listall") || {
        echo "Failed to add dependencies to target" >&2
        return 14
    }
    [ ${#WARNINGS[@]} -gt 0 ] && {
        echo "Dependencies are not added to etherus:" >&2
        (IFS=$'\n'; echo "${WARNINGS[*]}") >&2
        return 15
    }
    [ ${INSTALLS:-0} -gt 0 ] || {
        echo "No dependencies were added to etherus target" >&2
        return 16
    }
    systemctl daemon-reload || {
        echo "Failed to reload systemd daemon" >&2
        return 13
    }
    systemctl enable etherus.target && {
        echo "Etherus Daemon enabled successfully"
    } || {
        echo "Failed to enable Etherus Daemon" >&2
    }
    systemctl start etherus.target && {
        echo "Etherus Daemon started successfully"
    } || {
        echo "Failed to start Etherus Daemon" >&2
    }
    echo "Use systemctl for administration"
    systemctl list-dependencies etherus.target
}

_cmd_firewall() {
    command -v firewall-cmd &>/dev/null && {
        obey firewall_firewalld
        return $?
    }
    echo "Failed to detect system firewall" >&2
    return 1
}

_cmd_firewall_firewalld() {
    [ "$(id -u)" = "0" ] || {
        [ -z "$CENTOS7INSTALLSUBSHELL" ] || {
            echo "Failed to run firewall_firewalld as superuser" >&2
            return 1
        }
        export CENTOS7INSTALLSUBSHELL=$$
        su "$SERVICENAME" -s "$0" firewall_firewalld "$@" || {
            echo "Failed to run firewall_firewalld" >&2
            return 2
        }
        return 0
    }
    firewall-cmd --permanent --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to configure etherus ports" >&2
        return 10
    }
    firewall-cmd --add-port=6656/tcp --add-port=6657/tcp --add-port=6660/tcp >/dev/null || {
        echo "Failed to open etherus ports" >&2
        return 11
    }
    echo "Firewall successfully configured for Etherus"
}

###################################################################################################

obey() {
    [ $# -eq 0 ] || {
        COMMAND="$1"
        shift
    }
    declare -F "_cmd_$COMMAND"&>/dev/null || {
        echo "Unknown command: $COMMAND"
        return -1
    }
    "_cmd_$COMMAND" "$@"
}

sequence() {
    local COMMAND="$1"
    shift
    for i in $@
    do
        $"$COMMAND" $i
    done
}

getFile() {
    [ $# -gt 1 ] && {
        local FILEPATH=$1
        shift
    }
    case "$1" in
        "genesis.json") [ -f "$FILEPATH/$1" ] && cat "$FILEPATH/$1" || cat << "#EOF#"
{
  "genesis_time": "2019-02-25T16:29:48.8917618Z",
  "chain_id": "etherus-main-chain",
  "consensus_params": {
    "block_size_params": {
      "max_bytes": "22020096",
      "max_txs": "10000",
      "max_gas": "-1"
  },
  "tx_size_params": {
      "max_bytes": "2097152",
      "max_gas": "-1"
  },
  "block_gossip_params": {
      "block_part_size_bytes": "65536"
  },
  "evidence_params": {
      "max_age": "100000"
  }
},
"validators": [
{
  "pub_key": {
    "type": "tendermint/PubKeyEd25519",
    "value": "zJMPdIPW9C1zghWHpEBhrgomU66dhDzD5VA3cGE8RXM="
},
"power": "2500",
"name": ""
}
],
"app_hash": ""
}
#EOF#
;;
"etherctl") cat << "#EOF#"
#!/usr/bin/env sh
#
# Copyright (C) 2019 Anton Filatov <ya-enot@mail.ru>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
eval "$(base64 -d <<< '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' | gunzip)"
#EOF#
;;
"etherus.target") cat << "#EOF#"
[Install]
WantedBy=multi-user.target

[Unit]
Description=Etherus blockchain network
After=network.target
Requires=network.target
#EOF#
;;
"etherus@.service") cat << "#EOF#"
[Unit]
Description=Etherus service %i
PartOf=etherus.target
After=network.target
Requires=network.target
Requires=tenderus@%i.service

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_etherus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
"tenderus@.service") cat << "#EOF#"
[Unit]
Description=Tenderus service %i
PartOf=etherus.target
After=network.target
Requires=network.target

[Service]
User=etherus
Group=etherus
Type=forking
WorkingDirectory=/opt/etherus
OOMScoreAdjust=-999
ExecStart=/opt/etherus/etherctl start_%i_tenderus
TimeoutStartSec=120
Restart=always

[Install]
WantedBy=etherus.target
#EOF#
;;
*) cat "$FILEPATH/$1"
;;
esac
}

obey "$@"
